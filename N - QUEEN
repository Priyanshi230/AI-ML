class Solution {
 public boolean isSafe(int row,int col,char[][]board){
     // for checking if queen is present in rows
     
     for(int i =0;i<board.length;i++){
         if(board[row][i] == 'Q'){
             return false;
         }
     }
     
     
     // for checking if queen is present in col
     
     for(int j =0;j<board.length;j++){
         if(board[j][col] == 'Q'){
             return false;
         }
     }
     
     // for checking upper right
     int r = row;
     for(int c= col; c<board.length && r >= 0; c++,r--){
         if(board[r][c] == 'Q'){
             return false;
         }
     }
     
     
     // for checking upper left
     r = row;
     for(int c= col;c>=0 && r>=0; c--,r--){
         if(board[r][c] == 'Q'){
             return false;
         }
     }
     
     // for checking bottom right
     r = row;
     for(int c =col;c < board.length && r < board.length;r++,c++){
         if(board[r][c] == 'Q'){
             return false;
         }
     }
     
      // for checking bottom left
     r = row;
     for(int c =col;c>=0 && r < board.length;r++,c--){
         if(board[r][c] == 'Q'){
             return false;
         }
     }
     return true;
 }
    
    public void addresult(char[][]board,ArrayList<List<String>> result){
        String row ="";
        List<String> list = new ArrayList<>();
        
        for(int i =0;i<board.length;i++){
            row = "";
            for(int j =0;j< board[0].length;j++){
                if(board[i][j] == 'Q')
                    row = row +'Q';

                 else
                     row = row +'.';
            }
            list.add(row);
        }
        
        result.add(list);
    }
    
    
    
    
    public void queen(char[][]board, ArrayList<List<String>> result,int col){
        if(col == board.length){
            addresult(board,result);
            return;
        }
        for(int row =0;row<board.length;row++){
            if(isSafe(row,col,board)){
                board[row][col] = 'Q';
                
                queen(board,result,col+1);
                board[row][col] = '.';
            }
        }
        
        
    }
    
    
    
    
    // main function
    public List<List<String>> solveNQueens(int n) {
        ArrayList<List<String>> result = new ArrayList<>();
        char [][] board = new char[n][n];
        queen(board,result,0);
        return result;
    }
}
